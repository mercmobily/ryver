
var ryver = require('ryver');
var p = require('path');
fs = require('fs.extra');
var eventEC = ryver.eventEC;


// filecopy
eventEC.onCollect( 'filter', function( cb ){

  var f = function( fileData, cb ){

    // If the file is to be dropped, goodbye
    if( fileData.info.drop ) return cb( null );

    // Make up `src` ensuring that there is a leading '/'
    var normalisedSrc = ryver.getSrc();
    normalisedSrc += ( normalisedSrc[ normalisedSrc.length - 1 ] === '/' ? '' : '/' );

    ryver.vlog( "Normalised src (with added trailing slash if needed) is", normalisedSrc );
    ryver.vlog( "Full file path is", fileData.system.filePath );

    // Get the "clean" file path relative to the `src` directory
    var filePathMinusSrc = fileData.system.filePath.substr( normalisedSrc.length );

    ryver.vlog( "File path without src is", filePathMinusSrc );

    // Make up the full destination of the file relative to `dst`
    var fullDest = p.join( ryver.getDst(), filePathMinusSrc );

    ryver.vlog( "Final destination, with `dst` in front is ", fullDest );

    // Make the containing directory in the destination folder
    fs.mkdirp( p.join( fullDest ), function( err ){
      if( err ) return cb( err );

      var s = fileData.system;
      fs.writeFile( p.join( fullDest, s.fileName + s.fileExt ), fileData.contents, function( err ){
        if( err ) return cb( err );
        cb( null );
      });

    });
  }

  // Return the function just defined as the filter
  cb( null, { name: 'filecopy', executor: f } );
});
