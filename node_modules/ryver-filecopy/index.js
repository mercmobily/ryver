
var ryver = require('ryver');
var p = require('path');
fs = require('fs.extra');
var eventEC = ryver.eventEC;

var originMasterFileURLs = {}

eventEC.onCollect( 'watch', function( cb ){

  var f = function( op, URL, cb ){
    console.log( "filecopy-watch: Operation", op, "on", URL );


    console.log("LOOK AT THIS:", originMasterFileURLs );


    cb( null );
  }

  // Return the function just defined as the filter
  cb( null, { name: 'filecopy-watch', executor: f } );
});


// filecopy
eventEC.onCollect( 'afterEverything', function( cb ){

  var f = function( fileData, cb ){

    // If the file is to be dropped, goodbye
    if( fileData.info.drop ) return cb( null );

    ryver.vlog( "Full file path is", fileData.system.filePath );

    // Make up the full destination of the file relative to `dst`
    var fullDest = p.join( ryver.getDst(), fileData.system.filePath );

    ryver.vlog( "Final destination, with `dst` in front is ", fullDest );

    // Make the containing directory in the destination folder
    fs.mkdirp( p.join( fullDest ), function( err ){
      if( err ) return cb( err );

      var s = fileData.system;
      fs.writeFile( p.join( fullDest, s.fileName + s.fileExt ), fileData.contents, function( err ){
        if( err ) return cb( err );

        // Creates an entry in originMasterFileURL if needed.
        // It will map the originMasterFileURL to the actually created files, so that
        // deletion of the source for example will lead to deletion of all resulting files
        var originMasterFileURL = fileData.system.originMasterFileURL;
        if( originMasterFileURL ) {
          originMasterFileURLs[ originMasterFileURL ] = originMasterFileURLs[ originMasterFileURL ] || [];
          originMasterFileURLs[ originMasterFileURL ].push( p.join( fileData.system.filePath, s.fileName + s.fileExt ) );
        }

        



        console.log("File written:", p.join( fullDest, s.fileName + s.fileExt ) );
        console.log( ryver.trimFileData( fileData ) );

        cb( null );
      });

    });
  }

  // Return the function just defined as the filter
  cb( null, { name: 'filecopy', executor: f } );
});
