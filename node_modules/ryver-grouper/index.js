
var ryver = require('ryver');
var p = require('path');
fs = require('fs.extra');

var eventEC = ryver.eventEC;

var groupData = exports.groupData = {};

// grouper -- information gathering for grouper
eventEC.onCollect( 'filter', function( cb ){

  var f = function( fileData, cb ){

    // No grouping to do for this file
    if( typeof fileData.info.groupingVars !== 'object') return cb( null, fileData );

    var groups = Object.keys( fileData.info.groupingVars );

    groups.forEach( function( group ){
      if( ! fileData.info[ group ] ) return;

      // Get group values as an array
      var groupValues = fileData.info[ group ].split( ',' );
      if( groupValues.length === 1 && groupValues[ 0 ] == '' ) return;

      // Initialise groupData if needed
      groupData[ group ] = groupData[ group ] || {};

      groupValues.forEach( function( value ){
        groupData[ group ] [ value ] = groupData[ group ] [ value ] || [];
        groupData[ group ] [ value ].push( fileData );
      })
    })

    return cb( null, fileData );
  }

  // Return the function just defined as the filter
  cb( null, { name: 'grouper', executor: f } );
});


// grouper-vars -- generating variables based on the gathered variables.
//                 To be run ONLY if fileData.info.delayPostProcess is set
//                 to true, or groupData is obviously incomplete
eventEC.onCollect( 'filter', function( cb ){

  var f = function( fileData, cb ){

    // This will only work if postProcess was delayed
    if( ! fileData.info.delayPostProcess ){
      ryver.log( "Processing wasn't delayed. Will not have full data. Skipping.")
      return cb( null, fileData );
    }

    ryver.log( "Processing was delayed. Setting variables");



    // TODO
    return cb( null, fileData );

  }

  // Return the function just defined as the filter
  cb( null, { name: 'grouper-vars', executor: f } );
});


// grouper -- afterFilter to generate lists
eventEC.onCollect( 'afterFilter', function( cb ){

  var f = function( cb ){
    console.log("DATA IS:", require('util').inspect( groupData, { depth: 10 }  ) );

    // TODO

    return cb( null );
  }

  // Return the function just defined as the filter
  cb( null, f );
});
