
var ryver = require('ryver');
var p = require('path');
var async = require('async');

var eventEC = ryver.eventEC;

var listData = {};
var DO = require( 'deepobject');

// lister -- information gathering for lister
eventEC.onCollect( 'afterFilters', function( cb ){

  var f = function( fileData, cb ){

    // If it has makeListLatestVars, it will force the file to fileData.info.delayPostProcess
    if( fileData.info.makeListLatestVars ){
      fileData.system.delayPostProcess = true;
    }

    // Initialise _ALL_ if needed
    listData._ALL_ = listData._ALL_ || [];

    // If it's not "listed", then it won't be in the picture at all
    if( ! fileData.info.listed ){
      ryver.log("Will NOT gather");
      return cb( null, fileData );
    }

    ryver.log("WILL GATHER! (information about this file)");

    // Add file to the main list of all files

    listData._ALL_.push( fileData );
    // listVars will have the list of "list variables",
    // e.g. 'tags', 'category'
    var listVars = ryver.getConfig().listVars;

    // No listing variables to do for this file
    if( typeof listVars !== 'object') return cb( null, fileData );

    var lists = Object.keys( listVars );

    // For each listVar set in the config, check if there's a
    // fileata.info[ list ] in the file's data -- if so, it will represent
    // a list of "values"
    lists.forEach( function( list ){
      if( ! fileData.info[ list ] ) return;

      // Initialise listData for that list if needed
      listData[ list ] = listData[ list ] || {};

      // Get list values as an array
      var listValues = fileData.info[ list ].split( ',' );
      if( listValues.length === 1 && listValues[ 0 ] == '' ) return;

      listValues.forEach( function( value ){
        listData[ list ] [ value ] = listData[ list ] [ value ] || [];
        listData[ list ] [ value ].push( fileData );
      })
    })

    return cb( null );
  }

  // Return the function just defined as the filter
  cb( null, { name: 'listdata-gatherer', executor: f } );
});

// Before running the delayed postProcessFilters, it will
// make sure that data is properly sorted
eventEC.onCollect( 'beforeDelayedPostProcess', function( cb ){

  var f = function( fileData, cb ){

    var makeSorter = function( sortField ){
      return function( a, b ){
        if( a.info[ sortField ] === b.info[ sortField ] ) return 0;
        if( a.info[ sortField ] >   b.info[ sortField ] ) return 1;
        if( a.info[ sortField ] >   b.info[ sortField ] ) return -1;
      }
    };

    // Sort the main (FULL) list of pages
    if( listData._ALL_ ){
      listData._ALL_.sort( ryver.getConfig().listAll.sortBy );
    }

    // Sort the sub-lists, if they are to be sorted
    var config = ryver.getConfig().listVars;
    Object.keys( listData ).forEach( function( list ){
      if( list === '_ALL_' ) return;
      var sortField = config[ list ].sortBy;
      Object.keys( listData[ list ] ).forEach( function( value ){
        listData[ list ] [ value ].sort( makeSorter( sortField ) );
      })
    });

    cb( null );
  }

  // Return the function just defined as the filter
  cb( null, { name: 'listdata-sorter', executor: f } );
});

// lister-vars -- generating variables based on the gathered variables.
//                 To be run ONLY if fileData.info.delayPostProcess is set
//                 to true, or listData is obviously incomplete
//                 This has things like "latest 10 blog entries", etc.
eventEC.onCollect( 'beforeDelayedPostProcess', function( cb ){

  var f = function( fileData, cb ){

    // This will only work if postProcess was delayed
//    if( ! fileData.info.makeListLatestVars ){
//      ryver.log( "makeListLatestVars isn't set, nothing to do")
//      return cb( null, fileData );
//    }

    ryver.log( "Setting listLatest variables");

    // Make up fileData.info.listLatestData based on
    // fileData.info.makeListLatestVars
    // The data will be taken from listData
    fileData.info.listLatestData = {};
    for( var list in fileData.info.makeListLatestVars ){

      // Setting `data` and `howMany`
      var data = DO.get( listData, list ) || [];
      var howMany = fileData.info.makeListLatestVars[ list ];

      fileData.info.listLatestData[ list ] = data.slice( 0, howMany - 1 );
    };
    return cb( null );
  }

  // Return the function just defined as the filter
  cb( null, { name: 'lister-latest-vars', executor: f } );
});


// lister -- afterDelayedPostProcess to generate lists
eventEC.onCollect( 'allDone', function( cb ){

  var f = function( cb ){

    var config = ryver.getConfig();

    var includesDir = config.includesFolder || '_includes';
    var templateNameAndExt= config.listTemplate || '_listTemplate.html';

    // Load the contents of the landing file
    ryver.readFile( includesDir, null, templateNameAndExt, function( err, listTemplateAsBuffer ){
      if( err ) return cb( err );

      // Calling the generating function passing the right value, config, data
      async.eachSeries(

        Object.keys( listData ),

        function( listName, cb ){

          if( listName === '_ALL_' ){
            makeList( listName, config.listAll, listData._ALL_, cb );
          } else {

            async.eachSeries(
              Object.keys( listData [ listName ] ),
              function( value, cb ){
                makeList( value, config.listVars[ listName ], listData[ listName ][ value ], cb );
              },
              function( err ){
                if( err ) return cb( err );
                cb( null );
              }
            );

          }
        },
        function( err ){
          if( err ) return cb( err );

          cb( null );
        }
      );

      // Beginning of makeList
      function makeList( listName, c, data, cb ){
        ryver.log("Making up list:", listName, "configured as:", c, "Number of items:", data.length );

        var filePath = c.indexFolder.replace('{{name}}', listName );
        ryver.log("File folder", c.indexFolder, "resolved as: ", filePath );

        // Get the extension of the template file
        var templateFileExt = p.extname( templateNameAndExt );

        // Make a copy of data.
        // This copy will be then spliced
        var d = data.slice();

        // Starting point, from page 1
        var pageNumber = 1;

        // Variables that will be used in the passed `info.listerData` object
        var totalElements = d.length;
        var totalPages = Math.floor( (d.length - 1 ) / c.perPage )  + 1;
        var elementsPerPage = c.perPage;

        async.whilst(
          function(){
            return (inPage = d.splice( 0, c.perPage ) ).length;
          },
          function( cb ){
            ryver.log("Processing page:", inPage.length );

            var fileName, prevFileName, nextFileName;

            // Make up the page name
            var listNumberPageName = config.listNumberPageName || 'index_{{number}}';
            var listMainPageName = config.listMainPageName || 'index';

            // **** WORK OUT fileName, nextFileName, prevFileName ****

            // Work out nextFileName
            if( pageNumber != totalPages )
              var nextFileName = listNumberPageName.replace( '{{number}}', pageNumber + 1 );

            // Work out prevFileName
            // Take care of the case where it's at the second page number, and
            // the previous page is just listMainPageName
            if( pageNumber == 1 ){
              // Noop
            } else if( pageNumber == 2 )
              prevFileName = listMainPageName;
            else
              prevFileName = listNumberPageName.replace( '{{number}}', pageNumber - 1 );

            // Work out own fileName, depending on the page name (first one is listMainPageName)
            if( pageNumber == 1 )
              fileName = listMainPageName;
            else
              fileName = config.listNumberPageName.replace( '{{number}}', pageNumber );

            // **** WORK OUT fileName, nextFileName, prevFileName ****

            ryver.log( "fileName resolved as:", fileName );

            // Enrich fileData with whatever is in _info.yaml placed in
            // the _source_ directory
            ryver.readYamlFile( ryver.getMainInfo(), filePath, '_info.yaml', function( err, info ){

              var maxPagesInPager = info.maxPagesInPager || 10;

              var pager = [];
              for( var i = 1; i <= totalPages; i++ ){
                var thisPage = ( i == pageNumber );
                if( i == 1 ) pagerPageName = listMainPageName;
                else pagerPageName = listNumberPageName.replace( '{{number}}', i );
                pager.push( { pageNumber: i, pageName: pagerPageName, thisPage: thisPage } );
              }

              // Cut the pager if necessary
              // Comments from now on assume 10 items per page, 137 items
              // 14 pager elements, pager.length is 14
              // max items 10
              //
              // For boundary test:

              // pager.length = 13
              // First index of array: 0
              // last index of array: 12
              // maxPagesInPager = 10
              // halfMaxPagesInPager = 5
              //
              // Shifting:
              // Page 1 : delta -4, start 0 (last index: 9)
              // Page 2 : delta -3, start 0 (last index: 9)
              // Page 3 : delta -2, start 0 (last index: 9)
              // Page 4 : delta -1, start 0 (last index: 9)
              // Page 5 : delta 0,  start 0 (last index: 9)

              // Page 6 : delta 1,  start 1 (last index: 10)
              // Page 7 : delta 2,  start 2 (last index: 11)
              // Page 8 : delta 3,  start 3 (last index: 12)

              // Page 9 : delta 4,  start 3 (last index: 12)
              // Page 10: delta 5,  start 3 (last index: 12)

              // Set basic starting variables
              var halfMaxPagesInPager = Math.floor( maxPagesInPager / 2 );
              var start = 0, length = pager.length;

              // If there are more pages than the length of the pager...
              if( length > maxPagesInPager ){

                // If it's over the half-length of the pager, shift the pager's
                // `start` rightwards. Unless it would go "too" rightwards,
                // in which case it will be at the right edge
                var delta = pageNumber - halfMaxPagesInPager;
                if( delta >= 1 ){
                  if( delta + maxPagesInPager <= lengh )
                    start = delta;
                  else
                    start = length - maxPagesInPager;
                }
              }

              // Only take the part of the array that is to be displayed
              pager = pager.splice( start, maxPagesInPager );

              var pagerData = {
                prevPageName: prevFileName,
                pageName: fileName,
                nextPageName: nextFileName,

                pageNumber: pageNumber,
                totalElemens: totalElements,
                totalPages: totalPages,
                elementsPerPage: elementsPerPage,
                pager: pager,
                inPageLength: inPage.length,
              };

              info.pagerData = pagerData;
              ryver.makeFileData( false, filePath, fileName + templateFileExt, listTemplateAsBuffer, info, function( err, fileData ){
                if( err ) return cb( err );

                ryver.vlog("Made fileData with:", filePath, fileName, templateFileExt, info );

                ryver.vlog("Resulting fileData:" );
                ryver.vlog( function(){
                  ryver.vlog( ryver.trimFileData( fileData ) );
                });

                ryver.filter( fileData, function( err ){
                  if( err ) return cb( err );

                  // Increment the page number
                  pageNumber++;
                  cb( null );
                });
              });
            });
          },
          function( err ){
            if( err ) return cb( err );

            return cb( null );
          }
        );
      }
      // End of makeList

    });


  }
  // End of f()

  // Return the function just defined as the filter
  cb( null, { name: 'lister-filegen', executor: f } );
});
