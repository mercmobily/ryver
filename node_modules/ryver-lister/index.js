
var ryver = require('ryver');
var p = require('path');
fs = require('fs.extra');

var eventEC = ryver.eventEC;

var listData = {};
var DO = require( 'deepobject');

// lister -- information gathering for lister
eventEC.onCollect( 'afterFilters', function( cb ){

  var f = function( fileData, cb ){

    // If it has makeListLatestVars, it will force the file to fileData.info.delayPostProcess
    if( fileData.info.makeListLatestVars ){
      fileData.system.delayPostProcess = true;
    }

    // Initialise _ALL_ if needed
    listData._ALL_ = listData._ALL_ || [];

    // If it's not "listed", then it won't be in the picture at all
    if( ! fileData.info.listed ) return cb( null, fileData );

    // Add file to the main list of all files

    listData._ALL_.push( fileData );
    // listVars will have the list of "list variables",
    // e.g. 'tags', 'category'
    var listVars = ryver.getConfig().listVars;

    // No listing variables to do for this file
    if( typeof listVars !== 'object') return cb( null, fileData );

    var lists = Object.keys( listVars );

    // For each listVar set in the config, check if there's a
    // fileata.info[ list ] in the file's data -- if so, it will represent
    // a list of "values"
    lists.forEach( function( list ){
      if( ! fileData.info[ list ] ) return;

      // Initialise listData for that list if needed
      listData[ list ] = listData[ list ] || {};

      // Get list values as an array
      var listValues = fileData.info[ list ].split( ',' );
      if( listValues.length === 1 && listValues[ 0 ] == '' ) return;

      listValues.forEach( function( value ){
        listData[ list ] [ value ] = listData[ list ] [ value ] || [];
        listData[ list ] [ value ].push( fileData );
      })
    })

    return cb( null );
  }

  // Return the function just defined as the filter
  cb( null, { name: 'listdata-gatherer', executor: f } );
});

// Before running the delayed postProcessFilters, it will
// make sure that data is properly sorted
eventEC.onCollect( 'beforeDelayedPostProcess', function( cb ){

  var f = function( fileData, cb ){

    var makeSorter = function( sortField ){
      return function( a, b ){
        if( a.info[ sortField ] === b.info[ sortField ] ) return 0;
        if( a.info[ sortField ] >   b.info[ sortField ] ) return 1;
        if( a.info[ sortField ] >   b.info[ sortField ] ) return -1;
      }
    };

    // Sort the main (FULL) list of pages
    if( listData._ALL_ ){
      listData._ALL_.sort( ryver.getConfig().listAll.sortBy );
    }

    // Sort the sub-lists, if they are to be sorted
    var config = ryver.getConfig().listVars;
    Object.keys( listData ).forEach( function( list ){
      if( list === '_ALL_' ) return;
      var sortField = config[ list ].sortBy;
      Object.keys( listData[ list ] ).forEach( function( value ){
        listData[ list ] [ value ].sort( makeSorter( sortField ) );
      })
    });

    cb( null );
  }

  // Return the function just defined as the filter
  cb( null, { name: 'listdata-sorter', executor: f } );
});

// lister-vars -- generating variables based on the gathered variables.
//                 To be run ONLY if fileData.info.delayPostProcess is set
//                 to true, or listData is obviously incomplete
//                 This has things like "latest 10 blog entries", etc.
eventEC.onCollect( 'filter', function( cb ){

  var f = function( fileData, cb ){

    // This will only work if postProcess was delayed
    if( ! fileData.info.makeListLatestVars ){
      ryver.log( "makeListLatestVars isn't set, nothing to do")
      return cb( null, fileData );
    }

    ryver.log( "Setting listLatest variables");

    // Make up fileData.info.listLatestData based on
    // fileData.info.makeListLatestVars
    // The data will be taken from listData
    fileData.info.listLatestData = {};
    for( var list in fileData.info.makeListLatestVars ){

      // Setting `data` and `howMany`
      var data = DO.get( listData, list ) || [];
      var howMany = fileData.info.makeListLatestVars[ list ];

      fileData.info.listLatestData[ list ] = data.slice( 0, howMany - 1 );
    };
    return cb( null );
  }

  // Return the function just defined as the filter
  cb( null, { name: 'lister-vars', executor: f } );
});


// lister -- afterDelayedPostProcess to generate lists
eventEC.onCollect( 'afterDelayedPostProcess', function( cb ){

  var f = function( fileData, cb ){

    var config = ryver.getConfig();

    // TODO: Read the source file, (config.includesFolder || _includes )/ (config.listTemplate || listTemplate.html )
    // TODO: Save ext of listConfig file

    // Calling the generating function passing the right value, config, data
    Object.keys( listData ).forEach( function( list ){
      if( list === '_ALL_' ){
        makeList( list, config.listAll, listData._ALL_ );
      } else {
        Object.keys( listData [ list ] ).forEach( function( value ){
          makeList( value, config.listVars[ list ], listData[ list ][ value ] );
        })
      }
    });

    function makeList( list, config, data ){
      ryver.log("CALLED WITH:", list, config, data.length );

      // TODO
      // Create fileData config.perPage at a time, till data is done.
      // Name file config.indexFolder/index.[EXT of listTemplate]
      // Name other files config.indexFolder/index_N.[EXT of listTemplate]
      // Pass variables
    }

    return cb( null );
  }

  // Return the function just defined as the filter
  cb( null, { name: 'lister-filegen', executor: f } );
});
