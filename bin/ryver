#!/usr/bin/env node

/**
 * Dependencies.
 */

var ryver = require('..');
var program = require('commander');
var chalk = require('chalk');
var yaml = require('js-yaml');

var fs = require('fs');
var p = require('path');

/**
 * Support functions.
 */

function pathIsExistingDir( path ){
  try {
    return fs.lstatSync( path ).isDirectory();
  } catch ( e ){
    fatal( e );
  }
}


function fatal(msg, stack){
  console.error();
  console.error(chalk.red('  Ryver') + chalk.gray(' · ') + msg);
  if (stack) {
    console.error();
    console.error(chalk.gray(stack));
  }
  console.error();
  process.exit(1);
}


function log(message){
  console.log();
  console.log(chalk.gray('  Ryver · ') + message);
  console.log();
}


/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage("[options] [source] [destination]")
  .option('-p, --plugins [plugins]', 'Add plugins')
  .option('-v, --verbose', 'Verbose output')
  .option('-x, --extra-verbose', 'Very verbose output');

/**
 * Examples.
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build using current directory as source, and ./_site as destinaton"');
  console.log('    $ ryver');
  console.log();
  console.log('    # build using /home/m/source as source, and and /home/m/source/_site as destinaton"');
  console.log('    $ ryver /home/m/source');
  console.log();
  console.log('    # build using /home/m/source as source, and and /home/m/site as destinaton"');
  console.log('    $ ryver /home/m/source /home/m/site');
  console.log();
  console.log('    # build loading the plugin "ryver-extrafilter" dynamically');
  console.log('    $ ryver -p /home/m/source /home/m/site');
  console.log();

});

/**
 * Parse and get parameters.
 */

program.parse(process.argv);

var cwd = process.cwd();
var src = program.args[ 0 ] || '.';
var dst = program.args[ 1 ] || './_site';

pathIsExistingDir( src );
pathIsExistingDir( dst );

ryver.setSrc( src );
ryver.setDst( dst );

// Set verbosty level
if( program.verbose ) ryver.setVerbose( 1 );
else if( program.extraVerbose ) ryver.setVerbose( 2 );

/**
 * Load plugins.
 */

// Basic plugins that are always loaded
var plugins = [ 'frontmatter', 'layout', 'markup-markdown', 'template-liquid', 'filecopy', 'landing' ];

// Add plugins from command line parameter, if present
if( program.plugins && program.plugins != '' ){
  plugins = plugins.concat( program.plugins.split( ',' ) );
}

// Add plugin from "master" _info.yaml file

// Try and read the master _info.yaml file
fs.readFile( p.join( src, '_info.yaml'), function( err, info ){

  // If the file couldn't be read, then that's it -- skip to afterPluginListLoaded()
  if( err ) return afterPluginListLoaded();

  try {
    firstInfo = yaml.safeLoad( info, { filename:  p.join( src, '_info.yaml') } );
  } catch( e ) {
    fatal( e, e.stack );
  }

  // Add plugins from the first _info.yaml file
  if( firstInfo.plugins && firstInfo.plugins != '' ){
    plugins = plugins.concat( firstInfo.plugins.split( ',' ) );
  }

  // That's it: the list of plugins is final. Go to next stage.
  afterPluginListLoaded();
});

3

function afterPluginListLoaded(){

  // Load all plugins, which are the module named 'ryver' plus the plugin name
  plugins.forEach( function( plugin ){
    require( 'ryver-' + plugin );
  });

  ryver.collectFilters( function( err ){
    if( err ) return fatal( err.message, err.stack );

    // Let the fun begin!
    ryver.build( function( err ){
      if( err ) return fatal( err.message, err.stack );

      process.exit();
    });
  })
}
