#!/usr/bin/env node

/**
 * Dependencies.
 */

var ryver = require('..');
var program = require('commander');
var chalk = require('chalk');
var yaml = require('js-yaml');
var async = require('async');

var fs = require('fs');
var p = require('path');

var static = require('node-static');

/**
 * Support functions.
 */

function pathIsExistingDir( path ){
  try {
    return fs.lstatSync( path ).isDirectory();
  } catch ( e ){
    fatal( e );
  }
}


function fatal(msg, stack){
  console.error();
  console.error(chalk.red('  Ryver') + chalk.gray(' · ') + msg);
  if (stack) {
    console.error();
    console.error(chalk.gray(stack));
  }
  console.error();
  process.exit(1);
}


function log( message ){
  console.log();
  console.log( chalk.gray('  Ryver · ') + message );
  console.log();
}

function serveFiles(){
  var port = program.port || 8080;

  var finalhandler = require('finalhandler')
  var http = require('http')
  var serveStatic = require('serve-static')

  // Serve up public/ftp folder
  var serve = serveStatic( dst, { fallthrough: false, 'index': ['index.html', 'index.htm']})

  // Create server
  var server = http.createServer(function( req, res ){
    var done = finalhandler( req, res)
    serve( req, res, function( err ){
      if( err ){
        if( err.status === 404 ) console.err( "File not found:", err.path );
        else console.log( "Server error:", err );
      }
      done( err );
    });
  })

  // Listen
  server.listen( port );
  console.log("Site is available on http://localhost:" + port)
}


/**

 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage("[options] [source] [destination]")
  .option('-P, --plugins [plugins]', 'Set plugins to load')
  .option('-v, --verbose', 'Verbose output')
  .option('-x, --extra-verbose', 'Very verbose output')
  .option('-s, --serve', 'Serve site after building')
  .option('-p, --port [port]', 'If serving a site, which port to use (default: 8080)')
  .option('-w, --watch', 'Watch for file changes after building');

/**
 * Examples.
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build using current directory as source, and ./_site as destinaton"');
  console.log('    $ ryver');
  console.log();
  console.log('    # build using /home/m/source as source, and and /home/m/source/_site as destinaton"');
  console.log('    $ ryver /home/m/source');
  console.log();
  console.log('    # build using /home/m/source as source, and and /home/m/site as destinaton"');
  console.log('    $ ryver /home/m/source /home/m/site');
  console.log();
  console.log('    # build loading the plugin "ryver-extrafilter" dynamically');
  console.log('    $ ryver -p /home/m/source /home/m/site');
  console.log();

});

/**
 * Parse and get parameters.
 */

program.parse( process.argv );

var cwd = process.cwd();
var src = program.args[ 0 ] || '.';
var dst = program.args[ 1 ] || './_site';

pathIsExistingDir( src );
pathIsExistingDir( dst );

ryver.setSrc( src );
ryver.setDst( dst );

// Set verbosty level
if( program.verbose ) ryver.setVerbose( 1 );
else if( program.extraVerbose ) ryver.setVerbose( 2 );

// Set the internal watch variable
if( program.watch ) ryver.setWatch( true );

/**
 * Load plugins.
 */

// Default plugins
//var plugins = [ 'frontmatter', 'pager', 'markup-markdown', 'layout', 'landing', 'lister', 'template-liquid', 'template-ejs', 'filecopy'  ];
var plugins = [ 'frontmatter', 'pager', 'markup-markdown', 'layout', 'landing', 'template-liquid', 'template-ejs', 'filecopy'  ];


// Add plugin from "master" _info.yaml file

ryver.readAndSetConfig( function( err, config ){
  if( err ) fatal( err, err.stack );

  //var plugins;
  // Take plugins from the command line (which takes precedence) or the config
  // file (as a last resort to change the default list);
  if( program.plugins && program.plugins != '' ){
      //console.log( "IT IS: ", program.plugins );
    plugins = program.plugins.split( ',' );
  } else {
    if( config.plugins && config.plugins != '' ){
      plugins = config.plugins.split( ',' );
    }
  }

  ryver.log("Plugins to apply:", plugins.join(',') );

  // Load all plugins, which are the module named 'ryver' plus the plugin name
  plugins.forEach( function( plugin ){
    if( plugin === 'watcher') fatal( new Error( "To enable watcher, simply use -w or --watch" ) );
    require( 'ryver-' + plugin );
  });
  if( program.watch ) var watcher = require( 'ryver-watcher' );

  // This will enrich ryver's internal variables
  // to pre-store the full list of all available filters
  // as well as all available hooks
  ryver.collectFiltersAndHooks( function( err ){
    if( err ) return fatal( err.message, err.stack );

    // Let the fun begin!
    ryver.build( function( err ){
      if( err ) return fatal( err.message, err.stack );

      // If the serve option is on, serve the files
      if( program.serve) serveFiles();

      if( watcher ) watcher.watchFiles();

    });
  })
});
