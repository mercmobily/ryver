#!/usr/bin/env node

/**
 * Dependencies.
 */

var ryver = require('..');
var program = require('commander');
var chalk = require('chalk');

var fs = require('fs');
var resolve = require('path').resolve;

/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage("[options] [source] [destination]")
  .option('-p, --plugins [plugins]', 'Add plugins');
/**
 * Examples.
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build using current directory as source, and ./_site as destinaton"');
  console.log('    $ ryver');
  console.log();
  console.log('    # build using /home/m/source as source, and and /home/m/source/_site as destinaton"');
  console.log('    $ ryver /home/m/source');
  console.log();
  console.log('    # build using /home/m/source as source, and and /home/m/site as destinaton"');
  console.log('    $ ryver /home/m/source /home/m/site');
  console.log();
});

/**
 * Parse.
 */

program.parse(process.argv);

var cwd = process.cwd();
var source = program.args[ 0 ] || '.';
var dest = program.args[ 1 ] || './_site';

pathIsExistingDir( source );
pathIsExistingDir( dest );

if( program.plugins != '' ){
  var pluginsArray = program.plugins.split( '.' );



  console.log( pluginsArray );
}


/*

normalize(json.plugins).forEach(function(plugin){
  for (var name in plugin) {
    var opts = plugin[name];
    var mod;

    try {
      var local = resolve(dir, name);
      var npm = resolve(dir, 'node_modules', name);

      if (exists(local) || exists(local + '.js')) {
        mod = require(local);
      } else if (exists(npm)) {
        mod = require(npm);
      } else {
        mod = require(name);
      }
    } catch (e) {
      fatal('failed to require plugin "' + name + '".');
    }

    try {
      metalsmith.use(mod(opts));
    } catch (e) {
      fatal('error using plugin "' + name + '"...', e.message + '\n\n' + e.stack);
    }
  }
});
*/


ryver.collectFilters( function( err ){
  if( err ) return fatal( err.message, err.stack );

  // Let the fun begin!
  ryver.build( source, dest, {}, function( err ){
    if( err ) return fatal( err.message, err.stack );

    process.exit();
  });
})

function pathIsExistingDir( path ){
  try {
    return fs.lstatSync( path ).isDirectory();
  } catch ( e ){
    fatal( e );
  }
}


function fatal(msg, stack){
  console.log("I AM HERE! ", stack, "EH" );
  console.error();
  console.error(chalk.red('  Ryver') + chalk.gray(' · ') + msg);
  if (stack) {
    console.error();
    console.error(chalk.gray(stack));
  }
  console.error();
  process.exit(1);
}


function log(message){
  console.log();
  console.log(chalk.gray('  Ryver · ') + message);
  console.log();
}
