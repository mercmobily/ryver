#!/usr/bin/env node

/**
 * Dependencies.
 */

var ryver = require('..');
var program = require('commander');
var chalk = require('chalk');
var yaml = require('js-yaml');

var fs = require('fs');
var p = require('path');

var static = require('node-static');

/**
 * Support functions.
 */

function pathIsExistingDir( path ){
  try {
    return fs.lstatSync( path ).isDirectory();
  } catch ( e ){
    fatal( e );
  }
}


function fatal(msg, stack){
  console.error();
  console.error(chalk.red('  Ryver') + chalk.gray(' · ') + msg);
  if (stack) {
    console.error();
    console.error(chalk.gray(stack));
  }
  console.error();
  process.exit(1);
}


function log( message ){
  console.log();
  console.log( chalk.gray('  Ryver · ') + message );
  console.log();
}

function serveFiles(){
  var port = program.port || 8080;

  var fileServer = new static.Server( dst );

  require( 'http' ).createServer( function( req, res ){

    req.addListener( 'end', function(){

      fileServer.serve( req, res, function( err, result ) {
        if( err ) {
          console.error("Error serving " + req.url + " - " + err.message );
          res.writeHead( err.status, err.headers );
          res.end( "Error: " + err.message );
        } else {
          console.log("Served: " + req.url );
        }
      });
    }).resume();
  } ).listen( port );
  console.log("Site is available on http://localhost:" + port)
}

function watchFiles(){
  console.log("Watching files and re-generating in real time" );

  var chokidar = require('chokidar');

  var watcher = chokidar.watch( src, {
    persistent: true
  });

  var log = console.log.bind(console);

  watcher
    .on('change', function(path) { log('File', path, 'has been changed'); })
    .on('unlink', function(path) { log('File', path, 'has been removed'); })
    .on('unlinkDir', function(path) { log('Directory', path, 'has been removed'); })
    .on('error', function(error) { log('Error happened', error); })
    .on('ready', function() {
      watcher.on('add', function(path) { log('File', path, 'has been added'); })
      watcher.on('addDir', function(path) { log('Directory', path, 'has been added'); })
      log('Initial scan complete. Ready for changes.');
    })
    //.on('raw', function(event, path, details) { log('Raw event info:', event, path, details); })
  ;
    // More events.



  /*
  Watch source directory
  If anything changes, add it to an array
  Once per second:
    * Check if array is empty
    * If it's NOT empty:
      * If running == true, it's already running. Skip, will check again later
      * running = true;
      * Make a copy of array
      * Zap the array
      * For each file emit an emitCollect signal and receive functions back
      * Run all of the returned functions
      * When ALL finished, set running = false
*/


}


/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage("[options] [source] [destination]")
  .option('-P, --plugins [plugins]', 'Set plugins to load')
  .option('-v, --verbose', 'Verbose output')
  .option('-x, --extra-verbose', 'Very verbose output')
  .option('-s, --serve', 'Serve site after building')
  .option('-p, --port [port]', 'If serving a site, which port to use (default: 8080)')
  .option('-w, --watch', 'Watch for file changes after building');

/**
 * Examples.
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build using current directory as source, and ./_site as destinaton"');
  console.log('    $ ryver');
  console.log();
  console.log('    # build using /home/m/source as source, and and /home/m/source/_site as destinaton"');
  console.log('    $ ryver /home/m/source');
  console.log();
  console.log('    # build using /home/m/source as source, and and /home/m/site as destinaton"');
  console.log('    $ ryver /home/m/source /home/m/site');
  console.log();
  console.log('    # build loading the plugin "ryver-extrafilter" dynamically');
  console.log('    $ ryver -p /home/m/source /home/m/site');
  console.log();

});

/**
 * Parse and get parameters.
 */

program.parse(process.argv);

var cwd = process.cwd();
var src = program.args[ 0 ] || '.';
var dst = program.args[ 1 ] || './_site';

pathIsExistingDir( src );
pathIsExistingDir( dst );

ryver.setSrc( src );
ryver.setDst( dst );

// Set verbosty level
if( program.verbose ) ryver.setVerbose( 1 );
else if( program.extraVerbose ) ryver.setVerbose( 2 );

/**
 * Load plugins.
 */

// Default plugins
var plugins = [ 'frontmatter', 'pager', 'markup-markdown', 'layout', 'landing', 'lister', 'template-liquid', 'template-ejs', 'filecopy'  ];

// Add plugin from "master" _info.yaml file

ryver.readAndSetConfig( function( err, config ){
  if( err ) fatal( err, err.stack );

  var plugins;
  // Take plugins from the command line (which takes precedence) or the config
  // file (as a last resort to change the default list);
  if( program.plugins && program.plugins != '' ){
    plugins = program.plugins.split( ',' );
  } else {
    if( config.plugins && config.plugins != '' ){
      plugins = config.plugins.split( ',' );
    }
  }

  // Load all plugins, which are the module named 'ryver' plus the plugin name
  plugins.forEach( function( plugin ){
    require( 'ryver-' + plugin );
  });

  // This will enrich ryver's internal variables
  // to pre-store the full list of all available filters
  // as well as all available hooks
  ryver.collectFiltersAndHooks( function( err ){
    if( err ) return fatal( err.message, err.stack );

    // Let the fun begin!
    ryver.build( function( err ){
      if( err ) return fatal( err.message, err.stack );

      // If the serve option is on, serve the files
      if( program.serve) {
        serveFiles();
      }

      if( program.watch ){
        watchFiles();
      }

      // That's it: end of story.
      //process.exit();
    });
  })
});
